#!/usr/bin/env python
"""mkauthmap -c url.conf -c CONFIGFILE -o FILE

Queries CRIC roles .json and put it into /data/srv/state/frontend/etc/
"""
import os, subprocess, sys
from traceback import format_exc
import urllib2, os, os.path, re
from urllib2 import Request, urlopen, URLError
from optparse import OptionParser
from tempfile import mkstemp
from shutil import copyfile
from urlparse import urlsplit, urlunparse
from pprint import pprint #to debug objects content

#Global vars
opts = ''
args = ''
roles = '' 

#Funtions
#TODO excape failed commands!!!

#file mkauth.conf
def getFecthDetails(file):
  nline = 0
  for line in open(file,"r"):
   nline += 1
   m = re.match(r"^url (cric?:\S+)$", line)
  if not m:
    print "%s: %d: line not understood" % (file, nline)
    sys.exit(1)
  ml  =  m.group(1)
  url =  ml[5:]
  return url

def request(uri):
  content = ''
  url = "http:" + uri
  (scheme, netloc, path, query, frag) = urlsplit(url)
  query = "json&preset=" +query
  path = "/accounts/user" + path
  req = urllib2.Request(urlunparse((scheme, netloc, path, '', query, frag)))
  try:
    result = urllib2.urlopen(req)
  except URLError, e:
    if hasattr(e, 'reason'):
      print 'Failed to reach a server. Reason: '
      pprint(e.reason)
    elif hasattr(e, 'code'):
      print 'The server couldn\'t fulfill the request. Error code: '
      pprint(e.code)
  else:
      content = result.read()
      print "Content fetched without any error"
  return content

def diffFiles(file1, file2):
  rcode = -1
  try:
    command = "diff " + file1 + " " + file2
    p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    stdout = p.communicate()[0]
    rcode = p.returncode
  except(IOError, OSError) as e: 
      print "An error ocurred:"
      pprint(e)
  return rcode

def updateFile(opts, roles):
  if roles:
    try:
      fd, tmpname= mkstemp(dir = os.path.dirname(opts.out))
      tmpfile = os.fdopen(fd, "w")
      tmpfile.write(roles)
      tmpfile.close()
    except(IOError, OSError) as e: 
      print "An error ocurred:"
      pprint(e)
    try:
      if os.path.exists(tmpname) and os.path.getsize(tmpname) > 0:#Ensuring that file exits and is not empty
        diff = diffFiles(tmpname,opts.out)
        if (diff == 0):#fetched content have not changed
          try:
            os.remove(tmpname)
          except(IOError, OSError) as e:
            print "An error ocurred:"
            pprint(e)
        elif(diff == -1):#something wrong was with diff function
          try:
            os.remove(tmpname)
          except(IOError, OSError) as e:
            print 'An error ocurred: '
            pprint(e)
          exit(1) 
        else:#fetched content have changed
          try:
            command = "cp " + tmpname + " " + opts.out
            p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
            stdout = p.communicate()[0]
            os.remove(tmpname)
          except(IOError, OSError) as e:
            print 'An error ocurred: '
            pprint(e)
    except(IOError, OSError) as e:
      print "An error ocurred"
      pprint(e)

##Main
#Getting command line options
opt = OptionParser(__doc__)
opt.add_option("-c", "--conf", dest="conf", metavar="FILE", help="configuration file")
opt.add_option("-o", "--out", dest="out", metavar="FILE", help="output file")
opts, args = opt.parse_args()
#Checking command line options
if not opts.conf:
   print >> sys.stderr, "Config file name file is required"
   exit(1)

if not opts.out:
   print >> sys.stderr, "Output file name is required"
   exit(1)

##Calling core functions
# uri = getFecthDetails(opts.conf)
# content = request(uri)
# updateFile(opts, content)
# exit(0)

############Defining unit-tests###########
#Testcases, below code is just for testing propose
#test
def exec_commad(command):
  p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
  stdout = p.communicate()[0]
  return stdout

def everithing_ok():
  uri = getFecthDetails(opts.conf)
  content = request(uri)
  updateFile(opts, content)
  exit(0)

# test1 specified server doesn't exist
def test1():
  print "test1 specified server doesn't exist -------------------------------------------------------------------------------"
  print "------------------------------------------------------------------------------- FILE BEFORE-------------------------------------------------------------------------------" 
  command1 = "ls -lash " + opts.out
  print exec_commad(command1)
  uri ="//cms-cric-dev-3.cern.com"
  content = request(uri)
  print "------------------------------------------------------------------------------- INIT content-------------------------------------------------------------------------------"
  print content
  print "------------------------------------------------------------------------------- END content-------------------------------------------------------------------------------"
  updateFile(opts, content)
  print "------------------------------------------------------------------------------- FILE AFTER------------------------------------------------------------------------------" 
  command2 = "ls -lash " + opts.out
  print exec_commad(command2)

# test1_1 404/500 Page not Found
def test1_1():
  print "test1_1 404/500 Page not Found -------------------------------------------------------------------------------"
  print "------------------------------------------------------------------------------- FILE BEFORE-------------------------------------------------------------------------------" 
  command1 = "ls -lash " + opts.out
  print exec_commad(command1)
  uri ="//cmsweb-testbed.cern.ch/reqmgr2/requests?status=rejected-archived"
  content = request(uri)
  print "------------------------------------------------------------------------------- INIT content-------------------------------------------------------------------------------"
  print content
  print "------------------------------------------------------------------------------- END content-------------------------------------------------------------------------------"
  updateFile(opts, content)
  print "------------------------------------------------------------------------------- FILE AFTER------------------------------------------------------------------------------" 
  command2 = "ls -lash " + opts.out
  print exec_commad(command2)

#test2 HTTP REQUEST OK && FETCH CONTENT == EMPTY
def test2():
  print "test3 HTTP REQUEST OK && FETCH CONTENT == EMPTY -------------------------------------------------------------------------------"
  print "------------------------------------------------------------------------------- FILE BEFORE-------------------------------------------------------------------------------" 
  command1 = "ls -lash " + opts.out
  print exec_commad(command1)
  uri = getFecthDetails(opts.conf)
  content = request(uri)
  ##force content to be NONE for test this case
  content = None
  updateFile(opts, content)
  print "------------------------------------------------------------------------------- FILE AFTER------------------------------------------------------------------------------" 
  command2 = "ls -lash " + opts.out
  print exec_commad(command2)

 #test3 HTTP REQUEST OK && FETCH CONTENT == IS THE SAME
def test3():
  print "test4 HTTP REQUEST OK && FETCH CONTENT == IS THE SAME -------------------------------------------------------------------------------"
  print "------------------------------------------------------------------------------- FILE BEFORE-------------------------------------------------------------------------------" 
  command1 = "ls -lash " + opts.out
  print exec_commad(command1)
  uri = getFecthDetails(opts.conf)
  content = request(uri)
  updateFile(opts, content)
  print "------------------------------------------------------------------------------- FILE AFTER------------------------------------------------------------------------------" 
  command2 = "ls -lash " + opts.out
  print exec_commad(command2)

#test4 HTTP REQUEST OK && FETCH CONTENT == NEW
def test4():
  print "test4 HTTP REQUEST OK && FETCH CONTENT == NEW -------------------------------------------------------------------------------"
  print "------------------------------------------------------------------------------- FILE BEFORE-------------------------------------------------------------------------------" 
  command1 = "ls -lash " + opts.out
  print exec_commad(command1)
  uri = getFecthDetails(opts.conf)
  content = request(uri)
  content += "SOMETING NEW======"
  updateFile(opts, content)
  print "------------------------------------------------------------------------------- FILE AFTER------------------------------------------------------------------------------" 
  command2 = "ls -lash " + opts.out
  print exec_commad(command2)


### Calling tests
#everithing_ok()
#test1()
#test2()
#test3()
#test4()