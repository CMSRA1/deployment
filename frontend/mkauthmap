#!/usr/bin/env python
"""mkauthmap -c url.conf -c CONFIGFILE -o FILE

Queries CRIC roles .json and put it into /data/srv/state/frontend/etc/
"""
import os, subprocess, sys
import urllib2, os.path, re
from optparse import OptionParser
from tempfile import mkstemp
from shutil import copyfile
from urlparse import urlsplit, urlunparse

#Global vars
datain = None
opts = None
args = None
roles = "" 
#url = "http://cms-cric-dev-3.cern.ch/accounts/user/query/?json&preset=roles"


#Funtions
#TODO create a log file to registed when the fetch fails!!

def getFecthDetails(file):
  #File should be url URI 
  nline = 0
  url = ""
  for line in open(file,"r"):
   nline += 1
   m = re.match(r"^url (cric?:\S+)$", line)
  if not m:
    print "%s: %d: line not understood" % (file, nline)
    sys.exit(1)

  return m.group(1)

def requestHttp(url):
  url = url.split(':')
  print "PRINTING url"
  print url
  print url[1]
  (scheme, netloc, path, query, frag) = urlsplit("http"+url[1])
  print "scheme:"
  print scheme
  print "netloc:"
  print netloc
  print "path:"
  print path
  print "query:"
  print query
  print "frag:"
  print frag
  #query = "method=getGridmapUsers" + ((query and "&container=" + query) or "")
  query = "json&preset=roles" + ((query and "&container=" + query))
  #query = ""
  path += "accounts/user"
  #req = urllib2.Request(url)
  response = urllib2.Request(urlunparse((scheme, netloc, path, '', query, frag)))
  print "scheme:"
  print scheme
  print "netloc:"
  print netloc
  print "path:"
  print path
  print "query:"
  print query
  print "frag:"
  print frag
  content = urllib2.build_opener().open(response)

  return content

def example(opts):
  uris = args
  if opts.conf:
    nline = 0
    for line in open(opts.conf, "r"):
      nline += 1
      m = re.match(r"^group (vomss?:\S+) (\S+)$", line)
      if not m:
        print "%s: %d: line not understood" % (opts.conf, nline)
        sys.exit(1)
      #if m.group(2) != opts.vo:
      #  print "%s: %d: vo %s differs from expected %s" % (m.group(2), opts.vo)
      #  sys.exit(1)
      #uris.append(m.group(1))
    print(m.group(0))
    print(m.group(1))
    print(m.group(2))



def request(url):
  req = urllib2.Request(url)
  response = urllib2.urlopen(req)
  content = response.read()
  return content

def diffFiles(file1, file2):
  command = "diff " + file1 + " " + file2
  p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
  stdout = p.communicate()[0]
  #for debuging
  debug_file = open('/home/h4d4/sitedb-cric/out-diff.txt', 'w')
  debug_file.write(stdout)
  return p.returncode

def updateFile(opts):
  roles = request(url)
  #checking that query get something
  if roles is None:
    print("null")
    sys.exit(0)
  else:
    fd, tmpname= mkstemp(dir = os.path.dirname(opts.out))
    tmpfile = os.fdopen(fd, "w")
    tmpfile.write(roles)

    diff = diffFiles(tmpname,opts.out)
    #------------------------Debuggin differences------------------------
    command = "cp " + opts.out + " " + "/home/h4d4/sitedb-cric/roles-cric-old"
    p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    stdout = p.communicate()[0]

    if (diff == 0) :
      print "files =="
      sys.exit(0)
    else:
  #------------------------Debuggin differences------------------------
    #Next lines are for debuggin, to check diferences between the old tmpFile and opts.out(that has the content of the new tmpFile)
      #command = "cp " + tmpname + " " + opts.out
      print "files  differents"
      command2 = "cp " + tmpname + " " + "/home/h4d4/sitedb-cric/newtmp"
      p2 = subprocess.Popen(command2, stdout=subprocess.PIPE, shell=True)
      stdout2 = p2.communicate()[0]
  #------------------------Debuggin differences------------------------
    #Updating roles-cric
      command3 = "cp " + tmpname + " " + opts.out
      p3 = subprocess.Popen(command3, stdout=subprocess.PIPE, shell=True)
      stdout3 = p3.communicate()[0]

  #------------------------cloding and deleting file------------------------
    tmpfile.close()
    os.remove(tmpname)


####################################Main####################################
#Geting command line ooptions
opt = OptionParser()
opt.add_option("-o", "--out", dest="out", metavar="FILE", help="output file")
opt.add_option("-c", "--conf", dest="conf", metavar="FILE", help="configuration file")
opts, args = opt.parse_args()

#########updateFile(opts)

url = getFecthDetails(opts.conf)
requestHttp(url)

#example(opts)

