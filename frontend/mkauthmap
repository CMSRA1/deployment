#!/usr/bin/env python
"""mkauthmap -c url.conf -c CONFIGFILE -o FILE

Queries CRIC roles .json and put it into /data/srv/state/frontend/etc/
"""
import os, subprocess, sys
from traceback import format_exc
import urllib2, os, os.path, re
from urllib2 import Request, urlopen, URLError
from optparse import OptionParser
from tempfile import mkstemp
from shutil import copyfile
from urlparse import urlsplit, urlunparse
from pprint import pprint #to debug objects content

#Global vars
opts = None
args = None
roles = "" 

#Funtions
#TODO create a log file to registed when the fetch fails!!
#define debug functions 

#file mkauth.conf
def getFecthDetails(file):
  nline = 0
  for line in open(file,"r"):
   nline += 1
   m = re.match(r"^url (cric?:\S+)$", line)
  if not m:
    print "%s: %d: line not understood" % (file, nline)
    sys.exit(1)
  ml  =  m.group(1)
  url =  ml[5:]
  return url

def request(uri):
  content = None
  url = "http:" + uri
  (scheme, netloc, path, query, frag) = urlsplit(url)
  query = "json&preset=" +query
  path = "/accounts/user" + path
  req = urllib2.Request(urlunparse((scheme, netloc, path, '', query, frag)))
  try:
    result = urllib2.urlopen(req)
  except URLError, e:
    if hasattr(e, 'reason'):
      print 'Failed to reach a server. Reason: ' + e.reason
    elif hasattr(e, 'code'):
      print 'The server couldn\'t fulfill the request. Error code: ' + e.code
  else:
      content = result.read()
      print "Content feth without any error"

  return content

def diffFiles(file1, file2):
  command = "diff " + file1 + " " + file2
  p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
  stdout = p.communicate()[0]
  return p.returncode

def updateFile(opts, roles):
  if roles is None: #If file is empty
    sys.exit(0)
  else:
    fd, tmpname= mkstemp(dir = os.path.dirname(opts.out))
    tmpfile = os.fdopen(fd, "w")
    tmpfile.write(roles)
    tmpfile.close()
    diff = diffFiles(tmpname,opts.out)
    if (diff == 0) :
      os.remove(tmpname)
      sys.exit(0)
    else:
      command = "cp " + tmpname + " " + opts.out
      p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
      stdout = p.communicate()[0]
    os.remove(tmpname)

##Main
#Getting command line options
opt = OptionParser(__doc__)
opt.add_option("-c", "--conf", dest="conf", metavar="FILE", help="configuration file")
opt.add_option("-o", "--out", dest="out", metavar="FILE", help="output file")
opts, args = opt.parse_args()
#Checking command line options
if not opts.conf:
   print >> sys.stderr, "Config file name file is required"
   exit(1)

if not opts.out:
   print >> sys.stderr, "Output file name is required"
   exit(1)

#Calling core functions
uri = getFecthDetails(opts.conf)
content = request(uri)
updateFile(opts, content)
exit(0)



